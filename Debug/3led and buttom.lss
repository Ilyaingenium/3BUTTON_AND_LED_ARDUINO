
3led and buttom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000772  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f6  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d3c  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007e  00000000  00000000  00008184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008202  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  0000821a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	10 d0       	rcall	.+32     	; 0x96 <main>
  76:	40 c0       	rjmp	.+128    	; 0xf8 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <button_state>:
#include <avr/io.h>     // библиотека ввода/вывода которая объяснит компилятору какие порты ввода/вывода есть у микроконтроллера
#include <util/delay.h> //блиотека задержек

unsigned char button_state()
{
        if (!(PINB & (1<<0))) // если кнопка нажата в button_state отправляется 1     
  7a:	18 99       	sbic	0x03, 0	; 3
  7c:	0a c0       	rjmp	.+20     	; 0x92 <button_state+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	8f e2       	ldi	r24, 0x2F	; 47
  80:	95 e7       	ldi	r25, 0x75	; 117
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <button_state+0x8>
  86:	00 c0       	rjmp	.+0      	; 0x88 <button_state+0xe>
  88:	00 00       	nop
    {
        _delay_ms(15);
        if (!(PINB & (1<<0))) return 1; 
  8a:	83 b1       	in	r24, 0x03	; 3
  8c:	80 95       	com	r24
  8e:	81 70       	andi	r24, 0x01	; 1
  90:	08 95       	ret
    }
    return 0; // если кнопка не нажата в button_state отправляется 0  
  92:	80 e0       	ldi	r24, 0x00	; 0
}
  94:	08 95       	ret

00000096 <main>:

int main (void)
{
    unsigned char n_led = 1; // назначаем переменную n_led, присваиваем её 1
    
    DDRB  = 0b00000000; //
  96:	14 b8       	out	0x04, r1	; 4
    PORTB = 0b00000001; // настраиваем 0 пин Б на выход, таким образом отслеживаем изменение потеницала при нажатие кнопки
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	85 b9       	out	0x05, r24	; 5

    DDRD  =0b00011100; //	активируем 2,3,4 пины
  9c:	8c e1       	ldi	r24, 0x1C	; 28
  9e:	8a b9       	out	0x0a, r24	; 10
    PORTD =0b00000000; 
  a0:	1b b8       	out	0x0b, r1	; 11
    return 0; // если кнопка не нажата в button_state отправляется 0  
}

int main (void)
{
    unsigned char n_led = 1; // назначаем переменную n_led, присваиваем её 1
  a2:	c1 e0       	ldi	r28, 0x01	; 1
                case 1:
                PORTD ^= (1<<2); // первое нажатие n_led=1 сравнивается с case 1 загорается светодио на 2 пине
                
                break;
                case 2:
                PORTD ^= (1<<3); // второе нажатие n_led=2 сравнивается с case 2 загорается светодио на 3 пине
  a4:	08 e0       	ldi	r16, 0x08	; 8
                
                break;
                case 3:
                PORTD ^= (1<<4); // третье нажатие n_led=3 сравнивается с case 3 загорается светодио на 4 пине
  a6:	10 e1       	ldi	r17, 0x10	; 16
        if (button_state()) // если кнопка нажата, button_state устанавливается 1 начинается выполнение функции
        {

            switch(n_led){
                case 1:
                PORTD ^= (1<<2); // первое нажатие n_led=1 сравнивается с case 1 загорается светодио на 2 пине
  a8:	d4 e0       	ldi	r29, 0x04	; 4
    DDRD  =0b00011100; //	активируем 2,3,4 пины
    PORTD =0b00000000; 
    
    while (1)
    {
        if (button_state()) // если кнопка нажата, button_state устанавливается 1 начинается выполнение функции
  aa:	e7 df       	rcall	.-50     	; 0x7a <button_state>
  ac:	88 23       	and	r24, r24
  ae:	e9 f3       	breq	.-6      	; 0xaa <main+0x14>
        {

            switch(n_led){
  b0:	c2 30       	cpi	r28, 0x02	; 2
  b2:	69 f0       	breq	.+26     	; 0xce <main+0x38>
  b4:	18 f4       	brcc	.+6      	; 0xbc <main+0x26>
  b6:	c1 30       	cpi	r28, 0x01	; 1
  b8:	31 f0       	breq	.+12     	; 0xc6 <main+0x30>
  ba:	13 c0       	rjmp	.+38     	; 0xe2 <main+0x4c>
  bc:	c3 30       	cpi	r28, 0x03	; 3
  be:	59 f0       	breq	.+22     	; 0xd6 <main+0x40>
  c0:	c4 30       	cpi	r28, 0x04	; 4
  c2:	69 f0       	breq	.+26     	; 0xde <main+0x48>
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <main+0x4c>
                case 1:
                PORTD ^= (1<<2); // первое нажатие n_led=1 сравнивается с case 1 загорается светодио на 2 пине
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8d 27       	eor	r24, r29
  ca:	8b b9       	out	0x0b, r24	; 11
                
                break;
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <main+0x4c>
                case 2:
                PORTD ^= (1<<3); // второе нажатие n_led=2 сравнивается с case 2 загорается светодио на 3 пине
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	80 27       	eor	r24, r16
  d2:	8b b9       	out	0x0b, r24	; 11
                
                break;
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <main+0x4c>
                case 3:
                PORTD ^= (1<<4); // третье нажатие n_led=3 сравнивается с case 3 загорается светодио на 4 пине
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	81 27       	eor	r24, r17
  da:	8b b9       	out	0x0b, r24	; 11
                break;
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x4c>
                case 4:
                PORTD = 0b00000000; // четвертое нажатие n_led=4 сравнивается с case 4 светодиоды гастнут
  de:	1b b8       	out	0x0b, r1	; 11
                n_led=0; // n_led сбрасывается в ноль
  e0:	c0 e0       	ldi	r28, 0x00	; 0
                break;
            }
            n_led++; // при каджом нажатие n_led инкрементируется
  e2:	cf 5f       	subi	r28, 0xFF	; 255
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	82 e5       	ldi	r24, 0x52	; 82
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x54>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x5e>
  f4:	00 00       	nop
  f6:	d9 cf       	rjmp	.-78     	; 0xaa <main+0x14>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
